# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.event_location import EventLocation  # noqa: F401,E501
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, _date: str=None, description: str=None, location: EventLocation=None, capacity: int=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param id: The id of this Event.  # noqa: E501
        :type id: int
        :param _date: The _date of this Event.  # noqa: E501
        :type _date: str
        :param description: The description of this Event.  # noqa: E501
        :type description: str
        :param location: The location of this Event.  # noqa: E501
        :type location: EventLocation
        :param capacity: The capacity of this Event.  # noqa: E501
        :type capacity: int
        """
        self.swagger_types = {
            'id': int,
            '_date': str,
            'description': str,
            'location': EventLocation,
            'capacity': int
        }

        self.attribute_map = {
            'id': 'id',
            '_date': 'date',
            'description': 'description',
            'location': 'location',
            'capacity': 'capacity'
        }
        self._id = id
        self.__date = _date
        self._description = description
        self._location = location
        self._capacity = capacity

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def _date(self) -> str:
        """Gets the _date of this Event.


        :return: The _date of this Event.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Event.


        :param _date: The _date of this Event.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def description(self) -> str:
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def location(self) -> EventLocation:
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: EventLocation
        """
        return self._location

    @location.setter
    def location(self, location: EventLocation):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: EventLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def capacity(self) -> int:
        """Gets the capacity of this Event.


        :return: The capacity of this Event.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: int):
        """Sets the capacity of this Event.


        :param capacity: The capacity of this Event.
        :type capacity: int
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity
